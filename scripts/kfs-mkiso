#!/bin/bash

# Description: Script to build KOOMPI-Toolchain
# URL: 
# Maintainer: HangsiaHong, hangsia@koompi.org
# Organization: KOOMPI, koompi.com
# Depends on:

#!/bin/bash -e

chroot_run() {
	mount_pseudofs
	cp -L /etc/resolv.conf $KFS/etc/
	chroot $KFS $@
	retval=$?
	umount_pseudofs
	return $retval
}

mount_pseudofs() {
	mount --bind /dev $KFS/dev
	mount -t devpts devpts $KFS/dev/pts -o gid=5,mode=620
	mount -t proc proc $KFS/proc
	mount -t sysfs sysfs $KFS/sys
	mount -t tmpfs tmpfs $KFS/run
}

umount_pseudofs() {
	unmount $KFS/dev/pts
	unmount $KFS/dev
	unmount $KFS/run
	unmount $KFS/proc
	unmount $KFS/sys
}

unmount() {
	while true; do
		mountpoint -q $1 || break
		umount $1 2>/dev/null
	done
}

interrupted() {
	die "Abort by user."
}

cleanup() {
	rm -fr $WDIR
}

die() {
	[ "$@" ] && printerror $@
	umount_pseudofs
	cleanup
	exit 1
}

printstep() {
	echo -e "\e[0;36m::\e[0m $*"
}

printerror() {
	echo -e "\e[0;31mERROR:\e[0m $*"
}

CWD=$PWD
KFS="/mnt/kfs"
WORKDIR="$KFS/tmp"
WDIR="$WORKDIR/iso"
LABEL="KFSLIVECD"
OUTPUT="kfs-livecd-$(date +"%Y%m%d").iso"
FILEDIR="$CWD/kmp-files"

. $CWD/kmp-config

isolinux_files="chain.c32 isolinux.bin ldlinux.c32 libutil.c32 reboot.c32 menu.c32 libcom32.c32 poweroff.c32"

rm -fr $WDIR
mkdir -p $WDIR

printstep "Preparing isolinux files..."
mkdir -p $WDIR/{kfs,isolinux,boot}
for file in $isolinux_files; do
	cp $KFS/usr/share/syslinux/$file $WDIR/isolinux || die "failed copying '$file'"
done
#cp isolinux/splash.png $WDIR/isolinux
cp $FILEDIR/isolinux.cfg $WDIR/isolinux
[ -d rootfs ] && cp -Ra rootfs $WDIR

printstep "Make squash filesystem..."
mksquashfs $KFS $WDIR/kfs/root.sfs \
		-b 1048576 -comp xz -Xdict-size 100% \
		-e $KFS/var/lib/pkg/src/* \
		-e $KFS/var/lib/pkg/pkg/* \
		-e $KFS/var/lib/pkg/work/* \
		-e $KFS/tools/ \
		-e $KFS/tmp/* 2>/dev/null || die "failed create squashed filesystem"
printstep "Preparing kernel and initramfs..."
cp $KFS/boot/vmlinuz-kfs $WDIR/boot/vmlinuz || die "failed copying kernel"
cp kmp-files/livecd.hook $KFS/etc/mkinitramfs.d
kernver=$(file $KFS/boot/vmlinuz-kfs | cut -d ' ' -f9)
chroot_run mkinitramfs -k $kernver -a livecd -o /boot/initrd-live.img || die "failed create initramfs"
mv $KFS/boot/initrd-live.img $WDIR/boot/initrd || die "failed copying initrd"

printstep "Setup UEFI mode..."
mkdir -p $WDIR/boot/{grub/{fonts,x86_64-efi},EFI}
if [ -f $KFS/usr/share/grub/unicode.pf2 ];then
	cp $KFS/usr/share/grub/unicode.pf2 $WDIR/boot/grub/fonts
fi
if [ -f $WDIR/isolinux/splash.png ]; then
	cp $WDIR/isolinux/splash.png $WDIR/boot/grub/
fi
echo "set prefix=/boot/grub" > $WDIR/boot/grub-early.cfg
cp -a $KFS/usr/lib/grub/x86_64-efi/*.{mod,lst} $WDIR/boot/grub/x86_64-efi || die "Failed copying efi files"
cp $FILEDIR/grub.cfg $WDIR/boot/grub/

grub-mkimage -c $WDIR/boot/grub-early.cfg -o $WDIR/boot/EFI/bootx64.efi -O x86_64-efi -p "" iso9660 normal search search_fs_file
modprobe loop
dd if=/dev/zero of=$WDIR/boot/efiboot.img count=4096
mkdosfs -n KFSLIVECD-UEFI $WDIR/boot/efiboot.img || die "Failed mkdosfs"
mkdir -p $WDIR/boot/efiboot
mount -o loop $WDIR/boot/efiboot.img $WDIR/boot/efiboot || die "Failed mount efiboot.img"
mkdir -p $WDIR/boot/efiboot/EFI/boot
cp $WDIR/boot/EFI/bootx64.efi $WDIR/boot/efiboot/EFI/boot
umount $WDIR/boot/efiboot
rm -fr $WDIR/boot/efiboot

printstep "Making the iso..."
rm -f $OUTPUT
xorriso -as mkisofs \
    -isohybrid-mbr $KFS/usr/share/syslinux/isohdpfx.bin \
    -c isolinux/boot.cat \
    -b isolinux/isolinux.bin \
    -no-emul-boot \
    -boot-load-size 4 \
    -boot-info-table \
    -eltorito-alt-boot \
    -e boot/efiboot.img \
    -no-emul-boot \
    -isohybrid-gpt-basdat \
    -volid $LABEL \
    -o $OUTPUT $WDIR || die "failed create iso"

printstep "Cleaning up..."
cleanup

exit 0