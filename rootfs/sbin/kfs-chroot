#!/bin/bash

printhelp() {
	cat << EOF

Usage:
  $(basename $0) <newroot> <command>
  
(omit command to chroot only)
  
EOF
}

msgerr() {
	echo -e "ERROR: $@"
}
	
if [ "$UID" != "0" ]; then
	msgerr "$(basename $0) need root access!"
	printhelp
	exit 1
fi

KFS=$1

if [ -z $1 ]; then
	msgerr "Please set directory for chroot!"
	printhelp
	exit 1
fi

if [ ! -d $KFS ]; then
	msgerr "Directory '$KFS' not exist"
	printhelp
	exit 1
fi

shift

CMD=$@
if [ -z $2 ]; then
	CMD="/bin/bash --login"
fi

if [ -e /sys/firmware/efi/systab ]; then
	EFI_SYSTEM=1
fi

pushd $KFS &>/dev/null

mount --bind /dev $KFS/dev
mount -t devpts devpts $KFS/dev/pts -o gid=5,mode=620
mount -t proc proc $KFS/proc
mount -t sysfs sysfs $KFS/sys
if [ -n "$EFI_SYSTEM" ]; then
	mount --bind /sys/firmware/efi/efivars $KFS/sys/firmware/efi/efivars
fi
mount -t tmpfs tmpfs $KFS/run

if [ -h $KFS/dev/shm ]; then
  mkdir -p $KFS/$(readlink $KFS/dev/shm)
fi

cp -L /etc/resolv.conf $KFS/etc

echo ":: entering chroot to $KFS."

chroot "$KFS" /usr/bin/env -i \
HOME=/root \
TERM="$TERM" \
PS1='\u:\w\$ ' \
PATH=/bin:/usr/bin:/sbin:/usr/sbin $CMD

retval=$?

popd &>/dev/null

umount $KFS/dev/pts
umount $KFS/dev
umount $KFS/run
umount $KFS/proc
if [ -n "$EFI_SYSTEM" ]; then
	umount $KFS/sys/firmware/efi/efivars
fi
umount $KFS/sys

echo ":: chroot exited."

exit $retval
