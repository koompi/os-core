# Description: The Rust programming language is designed to be a safe, concurrent, practical language.
# URL: http://www.linuxfromscratch.org/blfs/view/svn/general/rust.html
# Maintainer: Jiren Edison
# Organization: KOOMPI
# Depends on: cURL CMake libssh2

name=rust
version=1.47.0
release=1
source=(https://static.rust-lang.org/dist/rustc-1.47.0-src.tar.gz)

build() {
	cd rustc-$version

	make DESTDIR=$PKG install

	mkdir /opt/rustc-1.47.0             &&
	ln -svfin rustc-1.47.0 /opt/rustc

cat << EOF > config.toml
# see config.toml.example for more possible options
# See the 8.4 book for an example using shipped LLVM
# e.g. if not installing clang, or using a version before 10.0
[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install cargo as well as rust
extended = true

[install]
prefix = "/opt/rustc-1.47.0"
docdir = "share/doc/rustc-1.47.0"

[rust]
channel = "stable"
rpath = false

# BLFS does not install the FileCheck executable from llvm,
# so disable codegen tests
codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"


EOF

	mkdir "$SRC/rust"
	export CARGO_HOME="$SRC/rust"
	export RUST_BACKTRACE=1
	export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"
	python3 ./x.py build --exclude src/tools/miri $MAKEFLAGS
	DESTDIR=$PKG python3 ./x.py install -v

	rm -rf $PKG/usr/lib/rustlib/components
	rm -rf $PKG/usr/lib/rustlib/manifest-rustc
	rm -rf $PKG/usr/lib/rustlib/rust-installer-version
	rm -rf $PKG/etc

}
          
